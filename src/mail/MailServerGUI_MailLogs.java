
package mail;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.border.Border;
import java.awt.event.*;
import javax.swing.table.JTableHeader;
import java.text.AttributedString;
import java.awt.font.TextAttribute;
import java.util.Map;
import java.sql.*;

public class MailServerGUI_MailLogs extends javax.swing.JFrame {
   
    
    public MailServerGUI_MailLogs() {
        initComponents();
        customizeTable(STT);
        customizeTable(STT1);
        alignTableColumnsCenter(STT);
        alignTableColumnsCenter(STT1); // Căn giữa cho cả bảng STT1
        addCellClickListener(STT); // Thêm listener cho bảng STT
        addCellClickListener(STT1); // Thêm listener cho bảng STT1
        addButtonColumn(STT); // Thêm nút cho bảng STT
        addButtonColumn(STT1); // Thêm nút cho bảng STT1
        loadSMTPData();
        loadLocalData();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        STT = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        STT1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollBar1 = new javax.swing.JScrollBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(255, 235, 235));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setPreferredSize(new java.awt.Dimension(180, 648));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SVN-Billy", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(235, 56, 116));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mail Server");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 13, 168, 50));

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setFont(new java.awt.Font("SVN-Amsi Narw", 0, 14)); // NOI18N
        jButton1.setText("User Management");
        jButton1.setAlignmentY(0.0F);
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 69, 180, 39));

        jButton2.setBackground(new java.awt.Color(255, 189, 189));
        jButton2.setFont(new java.awt.Font("SVN-Amsi Narw", 0, 14)); // NOI18N
        jButton2.setText("Mail Logs");
        jButton2.setAlignmentY(0.0F);
        jButton2.setBorder(null);
        jButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 114, 180, 39));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1520, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 0, 1520, 660));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -8, -1, 700));

        jPanel3.setBackground(new java.awt.Color(255, 241, 241));
        jPanel3.setPreferredSize(new java.awt.Dimension(1120, 648));

        STT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "qq", "qq", "qqqqqqq", "qqqqqqqqq", "qqqqqq", "qqqqq", null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Mail sender", "Mail receiver", "Subject", "Timestamp", "Content", "Attachment", "Status", "Function"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        STT.setAlignmentX(1.0F);
        STT.setAlignmentY(1.0F);
        STT.setShowGrid(true);
        STT.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(STT);
        if (STT.getColumnModel().getColumnCount() > 0) {
            STT.getColumnModel().getColumn(0).setResizable(false);
            STT.getColumnModel().getColumn(1).setResizable(false);
            STT.getColumnModel().getColumn(2).setResizable(false);
            STT.getColumnModel().getColumn(3).setResizable(false);
            STT.getColumnModel().getColumn(4).setResizable(false);
            STT.getColumnModel().getColumn(5).setResizable(false);
            STT.getColumnModel().getColumn(6).setResizable(false);
            STT.getColumnModel().getColumn(7).setResizable(false);
            STT.getColumnModel().getColumn(8).setResizable(false);
        }
        STT.getAccessibleContext().setAccessibleDescription("d");

        STT1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "Xuan", "Xuan2", "sss", "ssssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "ssss", "sss", "aa", null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Sender", "Receiver", "Subject", "Timestamp", "Content", "Attachment", "Status", "Function"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        STT1.setAlignmentX(1.0F);
        STT1.setAlignmentY(1.0F);
        STT1.setShowGrid(true);
        STT1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(STT1);
        if (STT1.getColumnModel().getColumnCount() > 0) {
            STT1.getColumnModel().getColumn(0).setResizable(false);
            STT1.getColumnModel().getColumn(1).setResizable(false);
            STT1.getColumnModel().getColumn(2).setResizable(false);
            STT1.getColumnModel().getColumn(3).setResizable(false);
            STT1.getColumnModel().getColumn(4).setResizable(false);
            STT1.getColumnModel().getColumn(5).setResizable(false);
            STT1.getColumnModel().getColumn(6).setResizable(false);
            STT1.getColumnModel().getColumn(7).setResizable(false);
        }

        jLabel3.setFont(new java.awt.Font("SVN-Billy", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(235, 56, 116));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Local");

        jLabel4.setFont(new java.awt.Font("SVN-Billy", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(235, 56, 116));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Mail send (SMTP)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(124, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 0, 980, 690));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Phương thức thêm MouseListener để hiển thị popup khi nhấp vào ô
    private void addCellClickListener(JTable table) {
    table.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            // Lấy vị trí ô được nhấp
            int row = table.rowAtPoint(e.getPoint());
            int col = table.columnAtPoint(e.getPoint());

            // Lấy giá trị của ô
            Object cellValue = table.getValueAt(row, col);

            // Nếu ô có giá trị, hiển thị popup
            if (cellValue != null) {
                // Tạo JTextArea để hiển thị nội dung đầy đủ
                JTextArea textArea = new JTextArea(cellValue.toString());
                textArea.setLineWrap(true); // Tự động xuống dòng
                textArea.setWrapStyleWord(true); // Xuống dòng theo từ
                textArea.setEditable(false); // Không cho phép chỉnh sửa
                textArea.setFont(new java.awt.Font("SVN-Amsi Narw", 0, 14)); // Đặt font giống giao diện

                // Tùy chỉnh màu sắc cho JTextArea
                textArea.setBackground(new Color(255, 241, 241)); // Màu nền của JTextArea (màu hồng nhạt giống giao diện)
                textArea.setForeground(new Color(235, 56, 116)); // Màu chữ (màu hồng đậm giống giao diện)

                // Đặt JTextArea vào JScrollPane để có thanh cuộn nếu nội dung quá dài
                JScrollPane scrollPane = new JScrollPane(textArea);
                scrollPane.setPreferredSize(new Dimension(400, 200)); // Kích thước popup

                // Tùy chỉnh màu sắc cho JScrollPane
                scrollPane.setBackground(new Color(255, 241, 241)); // Màu nền của JScrollPane
                scrollPane.getViewport().setBackground(new Color(255, 241, 241)); // Màu nền của viewport

                // Tạo một JPanel để chứa JScrollPane và tùy chỉnh màu nền của popup
                JPanel panel = new JPanel(new BorderLayout());
                panel.setBackground(new Color(255, 241, 241)); // Màu nền của panel (hồng nhạt)
                panel.add(scrollPane, BorderLayout.CENTER);

                // Tùy chỉnh màu nền của JOptionPane
                UIManager.put("OptionPane.background", new Color(255, 241, 241)); // Màu nền của JOptionPane
                UIManager.put("Panel.background", new Color(255, 241, 241)); // Màu nền của panel bên trong JOptionPane

                // Hiển thị popup với nội dung
                JOptionPane.showMessageDialog(MailServerGUI_MailLogs.this,
                    panel, // Sử dụng panel thay vì chỉ JScrollPane để có thể tùy chỉnh màu nền
                    "Full Content of Cell",
                    JOptionPane.INFORMATION_MESSAGE
                );

                // Đặt lại giá trị mặc định của UIManager để không ảnh hưởng đến các JOptionPane khác
                UIManager.put("OptionPane.background", null);
                UIManager.put("Panel.background", null);
            }
        }
    });
}
    
private void addButtonColumn(JTable table) {
    int functionColumnIndex = 8; // Cột "Function" ở index 8 (cột thứ 9)
    TableColumn functionColumn = table.getColumnModel().getColumn(functionColumnIndex);
    functionColumn.setCellRenderer(new ButtonRenderer());
    functionColumn.setCellEditor(new ButtonEditor(new JCheckBox(), table));
}

public class ButtonEditor extends DefaultCellEditor {
    private JButton button;
    private int row;
    private JTable table;

    public ButtonEditor(JCheckBox checkBox, JTable table) {
        super(checkBox);
        this.table = table;
        button = new JButton("Xóa");
        button.setOpaque(true);
        button.setBackground(new Color(255, 102, 102));
        button.setForeground(Color.WHITE);

        button.addActionListener(e -> {
            int rowToDelete = table.getSelectedRow();
            if (rowToDelete != -1) {
                deleteEmail(rowToDelete);
            }
            fireEditingStopped(); // Kết thúc chế độ chỉnh sửa
        });
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        this.row = row;
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        return "Xóa";
    }

    private void deleteEmail(int row) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        int idToDelete = (int) model.getValueAt(row, 0); // Lấy ID từ cột đầu tiên

        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:emails.db");
             PreparedStatement pstmt = conn.prepareStatement("DELETE FROM emails WHERE id = ?")) {
            pstmt.setInt(1, idToDelete);
            int affectedRows = pstmt.executeUpdate();

            if (affectedRows > 0) {
                model.removeRow(row); // Xóa khỏi bảng ngay lập tức
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

public class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setOpaque(true);
        setBackground(new Color(255, 231, 231)); // Màu hồng nhạt
        setForeground(Color.BLACK);
        setBorder(BorderFactory.createEmptyBorder());

        // Gạch chân chữ
        Font font = new Font("SVN-Amsi Narw", Font.BOLD, 14);
        Map<TextAttribute, Object> attributes = (Map<TextAttribute, Object>) font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        setFont(font.deriveFont(attributes));
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setText("Xóa"); // Gán nhãn "Xóa" cho nút
        Color tableBorderColor = table.getGridColor();
        setBorder(BorderFactory.createLineBorder(tableBorderColor, 1));
        return this;
    }
}
    
        private void alignTableColumnsCenter(JTable table) {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < table.getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
    }

    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel("com.formdev.flatlaf.FlatLightLaf");
        } catch (Exception e) {
            e.printStackTrace();
        }
        java.awt.EventQueue.invokeLater(() -> new MailServerGUI_MailLogs().setVisible(true));
    }
    
 private void loadSMTPData() {
    DefaultTableModel model = (DefaultTableModel) STT.getModel();
    model.setRowCount(0);

    String dbUrl = "jdbc:sqlite:emails.db";
    String sql = "SELECT id, sender, recipient, timestamp, subject, content, attachFiles, protocol FROM emails WHERE protocol = 'smtp'";

    try (Connection conn = DriverManager.getConnection(dbUrl);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        while (rs.next()) {
            int id = rs.getInt("id");
            String sender = rs.getString("sender");
            String recipient = rs.getString("recipient");
            String timestamp = rs.getString("timestamp");
            String subject = rs.getString("subject");
            String content = rs.getString("content");
            String attachFiles = rs.getString("attachFiles");

            model.addRow(new Object[]{id, sender, recipient, recipient, subject, timestamp, content, attachFiles, "Xóa"});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Lỗi khi tải dữ liệu SMTP: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}

private void loadLocalData() {
    DefaultTableModel model = (DefaultTableModel) STT1.getModel();
    model.setRowCount(0);

    String dbUrl = "jdbc:sqlite:emails.db";
    String sql = "SELECT id, sender, recipient, timestamp, subject, content, attachFiles, protocol FROM emails WHERE protocol = 'local'";

    try (Connection conn = DriverManager.getConnection(dbUrl);
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        while (rs.next()) {
            int id = rs.getInt("id");
            String sender = rs.getString("sender");
            String recipient = rs.getString("recipient");
            String timestamp = rs.getString("timestamp");
            String subject = rs.getString("subject");
            String content = rs.getString("content");
            String attachFiles = rs.getString("attachFiles");

            model.addRow(new Object[]{id, sender, recipient, subject, timestamp, content, attachFiles, "Xóa"});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Lỗi khi tải dữ liệu Local: " + e.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
}
    
    // Hàm tùy chỉnh bảng (áp dụng cho cả smtpTable và localTable)
    private void customizeTable(JTable table) {
        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("SVN-Amsi Narw", Font.PLAIN, 14));
        header.setForeground(Color.BLACK);
        header.setBackground(new Color(255, 231, 231));

        Color borderColor = new Color(255, 169, 169);
        Border uniformBorder = BorderFactory.createLineBorder(borderColor, 1);
        header.setBorder(uniformBorder);

        table.setGridColor(borderColor);
        table.setShowGrid(true);
        table.setBackground(new Color(255, 231, 231));

        if (table.getParent() instanceof JViewport) {
            Container scrollPane = table.getParent().getParent();
            if (scrollPane instanceof JScrollPane) {
                ((JScrollPane) scrollPane).setBorder(uniformBorder);
            }
        }
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        loadSMTPData();
        loadLocalData();
    }//GEN-LAST:event_jButton2ActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable STT;
    private javax.swing.JTable STT1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
